<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\application.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\application.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun May 21 22:40:16 2023
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
App_Event_Handler &rArr; App_Batt_Get_Vol &rArr; Drv_Batt_Get_Vol &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[32]">App_Batt_Handler</a> from app_batt.o(i.App_Batt_Handler) referenced from app_batt.o(i.App_Batt_Init)
 <LI><a href="#[33]">App_Event_Handler</a> from app_event.o(i.App_Event_Handler) referenced from app_event.o(i.App_Event_Init)
 <LI><a href="#[34]">App_Hall_Send_State</a> from app_hall.o(i.App_Hall_Send_State) referenced from app_hall.o(i.App_Hall_Init)
 <LI><a href="#[38]">App_Led_Flash_BattLevel_1_20</a> from app_led.o(i.App_Led_Flash_BattLevel_1_20) referenced from app_led.o(i.App_Led_Flash_BattLevel)
 <LI><a href="#[37]">App_Led_Flash_BattLevel_21_50</a> from app_led.o(i.App_Led_Flash_BattLevel_21_50) referenced from app_led.o(i.App_Led_Flash_BattLevel)
 <LI><a href="#[36]">App_Led_Flash_BattLevel_51_80</a> from app_led.o(i.App_Led_Flash_BattLevel_51_80) referenced from app_led.o(i.App_Led_Flash_BattLevel)
 <LI><a href="#[35]">App_Led_Flash_BattLevel_81_99</a> from app_led.o(i.App_Led_Flash_BattLevel_81_99) referenced from app_led.o(i.App_Led_Flash_BattLevel)
 <LI><a href="#[39]">App_Led_Hall_Open_Callback</a> from app_led.o(i.App_Led_Hall_Open_Callback) referenced from app_led.o(i.App_Led_Hall_Open)
 <LI><a href="#[3a]">App_Led_Handler</a> from app_led.o(i.App_Led_Handler) referenced from app_led.o(i.App_Led_Init)
 <LI><a href="#[1c]">DMA1_Channel1_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel2_3_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel4_5_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[3b]">Drv_Chrg_Intp_Handler</a> from drv_charger.o(i.Drv_Chrg_Intp_Handler) referenced from drv_charger.o(i.Drv_Chrg_Init)
 <LI><a href="#[3c]">Drv_Chrg_Read_Status</a> from drv_charger.o(i.Drv_Chrg_Read_Status) referenced from drv_charger.o(i.Drv_Chrg_Intp_Handler)
 <LI><a href="#[3d]">Drv_Hall_Isr_Handler</a> from drv_hall.o(i.Drv_Hall_Isr_Handler) referenced from drv_hall.o(i.Drv_Hall_Init)
 <LI><a href="#[3e]">Drv_Task_Isr_Handler</a> from drv_task.o(i.Drv_Task_Isr_Handler) referenced from drv_task.o(i.Drv_Task_Init)
 <LI><a href="#[3f]">Drv_Timer_Isr_Handler</a> from drv_timer.o(i.Drv_Timer_Isr_Handler) referenced from drv_timer.o(i.Drv_Timer_Init)
 <LI><a href="#[19]">EXTI0_1_IRQHandler</a> from hal_interrupt.o(i.EXTI0_1_IRQHandler) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[1a]">EXTI2_3_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[1b]">EXTI4_15_IRQHandler</a> from hal_interrupt.o(i.EXTI4_15_IRQHandler) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[29]">I2C1_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[2a]">I2C2_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[15]">LVD_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[18]">RCU_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[2b]">SPI1_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[2c]">SPI2_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from hal_interrupt.o(i.SysTick_Handler) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_cs32f0xx.o(i.SystemInit) referenced from startup_cs32f031.o(.text)
 <LI><a href="#[25]">TIM14_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[26]">TIM15_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[27]">TIM16_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[28]">TIM17_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[20]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from hal_interrupt.o(i.TIM3_IRQHandler) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[24]">TIM6_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[2d]">USART1_IRQHandler</a> from hal_interrupt.o(i.USART1_IRQHandler) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[2e]">USART2_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[2f]">USART6_8_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[14]">WWDT_IRQHandler</a> from startup_cs32f031.o(.text) referenced from startup_cs32f031.o(RESET)
 <LI><a href="#[40]">__main</a> from __main.o(!!!main) referenced from startup_cs32f031.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[44]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[45]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[e0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[47]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[49]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Drv_Com_Init &rArr; Hal_Com_Init &rArr; Hal_Com_Uart1_Init &rArr; usart_init &rArr; rcu_clk_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[61]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART6_8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cs32f031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_cs32f031.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[52]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Regist
</UL>

<P><STRONG><a name="[55]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Delete
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Msg_Get
</UL>

<P><STRONG><a name="[e6]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Timer_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Task_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clk_freq_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Filter
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[eb]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[59]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[46]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[5b]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ee]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[5a]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ef]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4d]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5d]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[51]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[62]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[63]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[66]"></a>App_Batt_Cal_Level</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, app_batt.o(i.App_Batt_Cal_Level))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Dischrg_Handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Chrg_Handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[6a]"></a>App_Batt_Get_Vol</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_batt.o(i.App_Batt_Get_Vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_Batt_Get_Vol &rArr; Drv_Batt_Get_Vol &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Batt_Get_Vol
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[6c]"></a>App_Batt_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_batt.o(i.App_Batt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = App_Batt_Init &rArr; Drv_Task_Regist_Period &rArr; Drv_Task_Regist &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Batt_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Regist_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>App_Event_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_event.o(i.App_Event_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = App_Event_Init &rArr; Drv_Task_Regist_Period &rArr; Drv_Task_Regist &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Regist_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>App_Hall_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_hall.o(i.App_Hall_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = App_Hall_Init &rArr; Drv_Hall_Init &rArr; Hal_Hall_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hall_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>App_Led_All_Turn_Off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_led.o(i.App_Led_All_Turn_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Led_All_Turn_Off &rArr; Drv_Led_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Open_Callback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Close
</UL>

<P><STRONG><a name="[73]"></a>App_Led_All_Turn_On</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_led.o(i.App_Led_All_Turn_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Led_All_Turn_On &rArr; Drv_Led_On
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_On
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[74]"></a>App_Led_Flash_BattLevel</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Flash_BattLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Led_Flash_BattLevel &rArr; Drv_Led_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[75]"></a>App_Led_Hall_Close</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Hall_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_Led_Hall_Close &rArr; App_Led_All_Turn_Off &rArr; Drv_Led_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Delete
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_All_Turn_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[72]"></a>App_Led_Hall_Open</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Hall_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_Led_Hall_Open &rArr; Drv_Timer_Regist_Oneshot &rArr; Drv_Timer_Regist
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Regist_Oneshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Delete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_On
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[80]"></a>App_Led_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = App_Led_Init &rArr; Drv_Led_Init &rArr; Hal_Led_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Regist_Period
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Drv_Batt_Get_Vol</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_batt.o(i.Drv_Batt_Get_Vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Drv_Batt_Get_Vol &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Get_SampleVal
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Dischrg_Handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Chrg_Handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Get_Vol
</UL>

<P><STRONG><a name="[6d]"></a>Drv_Batt_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_batt.o(i.Drv_Batt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Drv_Batt_Init &rArr; Hal_Batt_Init &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Init
</UL>

<P><STRONG><a name="[85]"></a>Drv_Chrg_Cfg</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, drv_charger.o(i.Drv_Chrg_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Drv_Chrg_Cfg &rArr; Drv_Chrg_Read &rArr; Hal_Chrg_Read &rArr; i2c_bytes_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Init
</UL>

<P><STRONG><a name="[68]"></a>Drv_Chrg_Get_Charging_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_charger.o(i.Drv_Chrg_Get_Charging_State))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Chrg_Handler
</UL>

<P><STRONG><a name="[6b]"></a>Drv_Chrg_Get_Usb_State</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_charger.o(i.Drv_Chrg_Get_Usb_State))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[6e]"></a>Drv_Chrg_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_charger.o(i.Drv_Chrg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Drv_Chrg_Init &rArr; Hal_Batt_Chrg_Init &rArr; Hal_Chrg_I2c_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Regist_Isr_Callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Chrg_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Init
</UL>

<P><STRONG><a name="[8c]"></a>Drv_Com_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_com.o(i.Drv_Com_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Drv_Com_Init &rArr; Hal_Com_Init &rArr; Hal_Com_Uart1_Init &rArr; usart_init &rArr; rcu_clk_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>Drv_Hall_Get_State</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_hall.o(i.Drv_Hall_Get_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Hall_Get_State
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Hall_Get_State
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Hall_Send_State
</UL>

<P><STRONG><a name="[78]"></a>Drv_Hall_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_hall.o(i.Drv_Hall_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Drv_Hall_Init &rArr; Hal_Hall_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Hall_Regist_Isr_Callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Hall_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Hall_Init
</UL>

<P><STRONG><a name="[7d]"></a>Drv_Led_Get_Stat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_led.o(i.Drv_Led_Get_Stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_Led_Get_Stat &rArr; Hal_Led_Get_Stat
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Get_Stat
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_1_20
</UL>

<P><STRONG><a name="[81]"></a>Drv_Led_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_led.o(i.Drv_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Drv_Led_Init &rArr; Hal_Led_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Init
</UL>

<P><STRONG><a name="[7b]"></a>Drv_Led_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_led.o(i.Drv_Led_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Led_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_On
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_All_Turn_Off
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_81_99
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_51_80
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_21_50
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_1_20
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel
</UL>

<P><STRONG><a name="[7c]"></a>Drv_Led_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_led.o(i.Drv_Led_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Led_On
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_81_99
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_51_80
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_21_50
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel_1_20
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Open
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_All_Turn_On
</UL>

<P><STRONG><a name="[70]"></a>Drv_Msg_Get</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_event.o(i.Drv_Msg_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_Msg_Get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[67]"></a>Drv_Msg_Put</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drv_event.o(i.Drv_Msg_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_Msg_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Hall_Send_State
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Dischrg_Handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Chrg_Handler
</UL>

<P><STRONG><a name="[95]"></a>Drv_Task_Delete</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_task.o(i.Drv_Task_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_Task_Delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Run
</UL>

<P><STRONG><a name="[96]"></a>Drv_Task_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_task.o(i.Drv_Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_Task_Init &rArr; Hal_Task_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Task_Regist_Isr_Callback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Task_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>Drv_Task_Regist</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, drv_task.o(i.Drv_Task_Regist))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Drv_Task_Regist &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Regist_Period
</UL>

<P><STRONG><a name="[6f]"></a>Drv_Task_Regist_Period</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, drv_task.o(i.Drv_Task_Regist_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Drv_Task_Regist_Period &rArr; Drv_Task_Regist &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Regist
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Init
</UL>

<P><STRONG><a name="[9a]"></a>Drv_Task_Run</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_task.o(i.Drv_Task_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Task_Run &rArr; Drv_Task_Delete &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>Drv_Timer_Delete</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_timer.o(i.Drv_Timer_Delete))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hall_Isr_Handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Intp_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Isr_Handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Close
</UL>

<P><STRONG><a name="[9b]"></a>Drv_Timer_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_timer.o(i.Drv_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Timer_Init &rArr; Hal_Timer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Timer_Regist_Isr_Callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>Drv_Timer_Regist_Oneshot</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_timer.o(i.Drv_Timer_Regist_Oneshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Drv_Timer_Regist_Oneshot &rArr; Drv_Timer_Regist
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Regist
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hall_Isr_Handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Intp_Handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Open
</UL>

<P><STRONG><a name="[82]"></a>Drv_Timer_Regist_Period</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, drv_timer.o(i.Drv_Timer_Regist_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Drv_Timer_Regist_Period &rArr; Drv_Timer_Regist
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Regist
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Init
</UL>

<P><STRONG><a name="[19]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_interrupt.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler &rArr; Hal_Chrg_Isr_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Isr_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_interrupt.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler &rArr; Hal_Hall_Isr_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Hall_Isr_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Hal_Batt_Adc_Get_SampleVal</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, hal_batt.o(i.Hal_Batt_Adc_Get_SampleVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion_start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_value_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Batt_Get_Vol
</UL>

<P><STRONG><a name="[88]"></a>Hal_Batt_Chrg_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_charger.o(i.Hal_Batt_Chrg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Hal_Batt_Chrg_Init &rArr; Hal_Chrg_I2c_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Intp_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_I2c_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Init
</UL>

<P><STRONG><a name="[84]"></a>Hal_Batt_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_batt.o(i.Hal_Batt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Hal_Batt_Init &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Get_SampleVal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Batt_Init
</UL>

<P><STRONG><a name="[9f]"></a>Hal_Chrg_Isr_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_charger.o(i.Hal_Chrg_Isr_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Chrg_Isr_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>Hal_Chrg_Read</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, hal_charger.o(i.Hal_Chrg_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hal_Chrg_Read &rArr; i2c_bytes_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_address_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_request_direction_config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bytes_number_config
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Read
</UL>

<P><STRONG><a name="[89]"></a>Hal_Chrg_Regist_Isr_Callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_charger.o(i.Hal_Chrg_Regist_Isr_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Init
</UL>

<P><STRONG><a name="[8b]"></a>Hal_Chrg_Write</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, hal_charger.o(i.Hal_Chrg_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hal_Chrg_Write &rArr; i2c_bytes_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_address_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_request_direction_config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bytes_number_config
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Write
</UL>

<P><STRONG><a name="[8d]"></a>Hal_Com_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_com.o(i.Hal_Com_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hal_Com_Init &rArr; Hal_Com_Uart1_Init &rArr; usart_init &rArr; rcu_clk_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Uart1_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Com_Init
</UL>

<P><STRONG><a name="[be]"></a>Hal_Com_Tx1_Isr_Handler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, hal_com.o(i.Hal_Com_Tx1_Isr_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Com_Tx1_Isr_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>Hal_Hall_Get_State</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_hall.o(i.Hal_Hall_Get_State))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hall_Get_State
</UL>

<P><STRONG><a name="[8f]"></a>Hal_Hall_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hal_hall.o(i.Hal_Hall_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Hal_Hall_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hall_Init
</UL>

<P><STRONG><a name="[a0]"></a>Hal_Hall_Isr_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_hall.o(i.Hal_Hall_Isr_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Hall_Isr_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>Hal_Hall_Regist_Isr_Callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_hall.o(i.Hal_Hall_Regist_Isr_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hall_Init
</UL>

<P><STRONG><a name="[91]"></a>Hal_Led_Get_Stat</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hal_led.o(i.Hal_Led_Get_Stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Led_Get_Stat
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Get_Stat
</UL>

<P><STRONG><a name="[92]"></a>Hal_Led_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, hal_led.o(i.Hal_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Hal_Led_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Init
</UL>

<P><STRONG><a name="[94]"></a>Hal_Led_Off</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_led.o(i.Hal_Led_Off))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_On
</UL>

<P><STRONG><a name="[93]"></a>Hal_Led_On</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_led.o(i.Hal_Led_On))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Off
</UL>

<P><STRONG><a name="[97]"></a>Hal_Task_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_task.o(i.Hal_Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hal_Task_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Init
</UL>

<P><STRONG><a name="[bb]"></a>Hal_Task_Isr_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_task.o(i.Hal_Task_Isr_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Task_Isr_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[98]"></a>Hal_Task_Regist_Isr_Callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_task.o(i.Hal_Task_Regist_Isr_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Init
</UL>

<P><STRONG><a name="[9c]"></a>Hal_Timer_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hal_timer.o(i.Hal_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Hal_Timer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_prescaler_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_base_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Init
</UL>

<P><STRONG><a name="[bd]"></a>Hal_Timer_Isr_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_timer.o(i.Hal_Timer_Isr_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_Timer_Isr_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>Hal_Timer_Regist_Isr_Callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_timer.o(i.Hal_Timer_Regist_Isr_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Init
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; Hal_Task_Isr_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Task_Isr_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, system_cs32f0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Task_Init
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_cs32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_interrupt.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; Hal_Timer_Isr_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Timer_Isr_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_interrupt.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; Hal_Com_Tx1_Isr_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Tx1_Isr_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32f031.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_event.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Handler
</UL>

<P><STRONG><a name="[a4]"></a>adc_calibration_value_get</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, cs32f0xx_adc.o(i.adc_calibration_value_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_calibration_value_get
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Get_SampleVal
</UL>

<P><STRONG><a name="[a3]"></a>adc_channel_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs32f0xx_adc.o(i.adc_channel_config))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Get_SampleVal
</UL>

<P><STRONG><a name="[a9]"></a>adc_config_struct_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cs32f0xx_adc.o(i.adc_config_struct_init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Init
</UL>

<P><STRONG><a name="[a5]"></a>adc_conversion_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cs32f0xx_adc.o(i.adc_conversion_start))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Get_SampleVal
</UL>

<P><STRONG><a name="[a8]"></a>adc_def_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cs32f0xx_adc.o(i.adc_def_init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Init
</UL>

<P><STRONG><a name="[aa]"></a>adc_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cs32f0xx_adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Init
</UL>

<P><STRONG><a name="[ad]"></a>gpio_mf_config</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cs32f0xx_gpio.o(i.gpio_mf_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_mf_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Uart1_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_I2c_Init
</UL>

<P><STRONG><a name="[a7]"></a>gpio_mode_set</STRONG> (Thumb, 164 bytes, Stack size 44 bytes, cs32f0xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Hall_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Led_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Uart1_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Gpio_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Intp_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_I2c_Init
</UL>

<P><STRONG><a name="[b3]"></a>i2c_bytes_number_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cs32f0xx_i2c.o(i.i2c_bytes_number_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_bytes_number_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Read
</UL>

<P><STRONG><a name="[ae]"></a>i2c_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, cs32f0xx_i2c.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_I2c_Init
</UL>

<P><STRONG><a name="[b2]"></a>i2c_request_direction_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cs32f0xx_i2c.o(i.i2c_request_direction_config))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Read
</UL>

<P><STRONG><a name="[b1]"></a>i2c_slave_address_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cs32f0xx_i2c.o(i.i2c_slave_address_config))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Read
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; Drv_Com_Init &rArr; Hal_Com_Init &rArr; Hal_Com_Uart1_Init &rArr; usart_init &rArr; rcu_clk_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Run
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Task_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Com_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Hall_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Event_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b0]"></a>nvic_init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, cs32f0xx_misc.o(i.nvic_init))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Hall_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Timer_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Uart1_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Intp_Init
</UL>

<P><STRONG><a name="[bf]"></a>rcu_clk_freq_get</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, cs32f0xx_rcu.o(i.rcu_clk_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rcu_clk_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[af]"></a>syscfg_exti_line_config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cs32f0xx_syscfg.o(i.syscfg_exti_line_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscfg_exti_line_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Hall_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Intp_Init
</UL>

<P><STRONG><a name="[b9]"></a>tim_base_init</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, cs32f0xx_tim.o(i.tim_base_init))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Timer_Init
</UL>

<P><STRONG><a name="[ba]"></a>tim_prescaler_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs32f0xx_tim.o(i.tim_prescaler_set))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Timer_Init
</UL>

<P><STRONG><a name="[b6]"></a>usart_init</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, cs32f0xx_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usart_init &rArr; rcu_clk_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clk_freq_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Uart1_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bc]"></a>SetSysClock</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, system_cs32f0xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[33]"></a>App_Event_Handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_event.o(i.App_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = App_Event_Handler &rArr; App_Batt_Get_Vol &rArr; Drv_Batt_Get_Vol &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Msg_Get
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Get_Usb_State
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Hall_Close
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_Flash_BattLevel
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_All_Turn_On
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Get_Vol
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Cal_Level
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_event.o(i.App_Event_Init)
</UL>
<P><STRONG><a name="[38]"></a>App_Led_Flash_BattLevel_1_20</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Flash_BattLevel_1_20))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_Led_Flash_BattLevel_1_20 &rArr; Drv_Led_Get_Stat &rArr; Hal_Led_Get_Stat
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_On
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Off
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Get_Stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_led.o(i.App_Led_Flash_BattLevel)
</UL>
<P><STRONG><a name="[37]"></a>App_Led_Flash_BattLevel_21_50</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Flash_BattLevel_21_50))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Led_Flash_BattLevel_21_50 &rArr; Drv_Led_On
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_On
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_led.o(i.App_Led_Flash_BattLevel)
</UL>
<P><STRONG><a name="[36]"></a>App_Led_Flash_BattLevel_51_80</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Flash_BattLevel_51_80))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Led_Flash_BattLevel_51_80 &rArr; Drv_Led_On
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_On
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_led.o(i.App_Led_Flash_BattLevel)
</UL>
<P><STRONG><a name="[35]"></a>App_Led_Flash_BattLevel_81_99</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Flash_BattLevel_81_99))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Led_Flash_BattLevel_81_99 &rArr; Drv_Led_On
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_On
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Led_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_led.o(i.App_Led_Flash_BattLevel)
</UL>
<P><STRONG><a name="[39]"></a>App_Led_Hall_Open_Callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Hall_Open_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_Led_Hall_Open_Callback &rArr; App_Led_All_Turn_Off &rArr; Drv_Led_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Led_All_Turn_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_led.o(i.App_Led_Hall_Open)
</UL>
<P><STRONG><a name="[3a]"></a>App_Led_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_led.o(i.App_Led_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Led_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_led.o(i.App_Led_Init)
</UL>
<P><STRONG><a name="[64]"></a>App_Batt_Chrg_Handler</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, app_batt.o(i.App_Batt_Chrg_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_Batt_Chrg_Handler &rArr; Drv_Batt_Get_Vol &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Msg_Put
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Get_Charging_State
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Batt_Get_Vol
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Cal_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Handler
</UL>

<P><STRONG><a name="[69]"></a>App_Batt_Dischrg_Handler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, app_batt.o(i.App_Batt_Dischrg_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_Batt_Dischrg_Handler &rArr; Drv_Batt_Get_Vol &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Msg_Put
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Batt_Get_Vol
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Cal_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Handler
</UL>

<P><STRONG><a name="[32]"></a>App_Batt_Handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_batt.o(i.App_Batt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = App_Batt_Handler &rArr; App_Batt_Dischrg_Handler &rArr; Drv_Batt_Get_Vol &rArr; Hal_Batt_Adc_Get_SampleVal &rArr; Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Dischrg_Handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Batt_Chrg_Handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Get_Usb_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_batt.o(i.App_Batt_Init)
</UL>
<P><STRONG><a name="[34]"></a>App_Hall_Send_State</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_hall.o(i.App_Hall_Send_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_Hall_Send_State &rArr; Drv_Msg_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hall_Get_State
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Msg_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_hall.o(i.App_Hall_Init)
</UL>
<P><STRONG><a name="[3e]"></a>Drv_Task_Isr_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_task.o(i.Drv_Task_Isr_Handler))
<BR>[Address Reference Count : 1]<UL><LI> drv_task.o(i.Drv_Task_Init)
</UL>
<P><STRONG><a name="[3f]"></a>Drv_Timer_Isr_Handler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, drv_timer.o(i.Drv_Timer_Isr_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Timer_Isr_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_timer.o(i.Drv_Timer_Init)
</UL>
<P><STRONG><a name="[9e]"></a>Drv_Timer_Regist</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, drv_timer.o(i.Drv_Timer_Regist))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Drv_Timer_Regist
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Regist_Period
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Regist_Oneshot
</UL>

<P><STRONG><a name="[3b]"></a>Drv_Chrg_Intp_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_charger.o(i.Drv_Chrg_Intp_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Drv_Chrg_Intp_Handler &rArr; Drv_Timer_Regist_Oneshot &rArr; Drv_Timer_Regist
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Regist_Oneshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_charger.o(i.Drv_Chrg_Init)
</UL>
<P><STRONG><a name="[87]"></a>Drv_Chrg_Read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_charger.o(i.Drv_Chrg_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Drv_Chrg_Read &rArr; Hal_Chrg_Read &rArr; i2c_bytes_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Cfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Read_Status
</UL>

<P><STRONG><a name="[3c]"></a>Drv_Chrg_Read_Status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_charger.o(i.Drv_Chrg_Read_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Drv_Chrg_Read_Status &rArr; Drv_Chrg_Read &rArr; Hal_Chrg_Read &rArr; i2c_bytes_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_charger.o(i.Drv_Chrg_Intp_Handler)
</UL>
<P><STRONG><a name="[86]"></a>Drv_Chrg_Write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drv_charger.o(i.Drv_Chrg_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Drv_Chrg_Write &rArr; Hal_Chrg_Write &rArr; i2c_bytes_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Chrg_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Chrg_Cfg
</UL>

<P><STRONG><a name="[3d]"></a>Drv_Hall_Isr_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_hall.o(i.Drv_Hall_Isr_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Drv_Hall_Isr_Handler &rArr; Drv_Timer_Regist_Oneshot &rArr; Drv_Timer_Regist
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Regist_Oneshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Timer_Delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hall.o(i.Drv_Hall_Init)
</UL>
<P><STRONG><a name="[b8]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hal_task.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Task_Init
</UL>

<P><STRONG><a name="[ac]"></a>Hal_Chrg_I2c_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hal_charger.o(i.Hal_Chrg_I2c_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Hal_Chrg_I2c_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mf_config
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Chrg_Init
</UL>

<P><STRONG><a name="[ab]"></a>Hal_Chrg_Intp_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hal_charger.o(i.Hal_Chrg_Intp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Hal_Chrg_Intp_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Chrg_Init
</UL>

<P><STRONG><a name="[a1]"></a>Hal_Batt_Adc_Filter</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hal_batt.o(i.Hal_Batt_Adc_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hal_Batt_Adc_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Adc_Get_SampleVal
</UL>

<P><STRONG><a name="[a6]"></a>Hal_Batt_Adc_Init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hal_batt.o(i.Hal_Batt_Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Hal_Batt_Adc_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_def_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config_struct_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Batt_Init
</UL>

<P><STRONG><a name="[b4]"></a>Hal_Com_Gpio_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_com.o(i.Hal_Com_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Hal_Com_Gpio_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Init
</UL>

<P><STRONG><a name="[b5]"></a>Hal_Com_Uart1_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, hal_com.o(i.Hal_Com_Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Hal_Com_Uart1_Init &rArr; usart_init &rArr; rcu_clk_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mf_config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Com_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[60]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
